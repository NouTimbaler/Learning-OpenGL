
		// vertex definition
		float positions[] = {
				0.0f, 0.0f, 0.0f, 0.0f,
				100.0f, 0.0f, 1.0f, 0.0f,
				100.0f, 100.0f, 1.0f, 1.0f,
				0.0f, 100.0f, 0.0f, 1.0f
		};

		unsigned int indices[] = {
				0, 1, 2,
				2, 3, 0
		};



		VertexArray va;

		VertexBuffer vb(positions, 4*4*sizeof(float));
		VertexBufferLayout layout;
		layout.Push<float>(2);
		layout.Push<float>(2);

		va.AddBuffer(vb, layout);

		IndexBuffer ib(indices, 6);

		va.UnBind();
		vb.UnBind();
		ib.UnBind();

		glm::mat4 proj = glm::ortho(0.0f, 960.0f, 0.0f, 540.0f, -1.0f, 1.0f);
		glm::mat4 view = glm::translate(glm::mat4(1.0f), glm::vec3(0, 0, 0));
		glm::mat4 model = glm::translate(glm::mat4(1.0f), glm::vec3(200, 200, 0));
		model = glm::scale(model, glm::vec3(2, 2, 0));

		glm::mat4 mvp = proj * view * model;

		Shader shader("res/shaders/basic.shader");
		shader.Bind();
		shader.SetUniformMat4f("u_MVP", mvp);

		Texture texture("res/textures/halloween.png");
		texture.Bind(0);
		shader.SetUniform1i("u_Texture", 0);

		texture.UnBind();
		shader.UnBind();


		Shader shader2("res/shaders/basic2.shader");
		shader2.Bind();
		shader2.SetUniform4f("u_Color", 0.8f, 0.1f, 0.8f, 1.0f);

		float r = 0.0f;
		float increment = 0.05f;

		glm::vec3 translation(600, 200, 0);
		float f = 0.0f;
		char buf[200];














				shader.Bind();
				texture.Bind();
				renderer.Draw(va, ib, shader);
				//shader.UnBind();
				//texture.UnBind();

		glm::mat4 model2 = glm::translate(glm::mat4(1.0f), translation);
		glm::mat4 mvp2 = proj * view * model2;
				shader2.Bind();
				shader2.SetUniform4f("u_Color", f, 0.1f, 0.8f, 1.0f);
		shader2.SetUniformMat4f("u_MVP", mvp2);
				renderer.Draw(va, ib, shader2);

				r += increment;
				if (r > 1.0f or r < 0.0f) increment *= -1;




				ImGui::Begin("Tester");
				ImGui::Text("This is the tester window of ImGui");
				ImGui::SliderFloat("Color", &f, 0.0f, 1.0f);
				ImGui::SliderFloat3("Position", &translation.x, 0.0f, 960.0f);

				ImGui::Text("Application average %.3f ms/frame (%.1f FPS", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);
				ImGui::End();
